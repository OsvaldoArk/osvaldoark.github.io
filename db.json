{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/alpha-dust/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/alpha-dust/source/img/bg-pattern.png","path":"img/bg-pattern.png","modified":0,"renderable":1},{"_id":"themes/alpha-dust/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/insulin/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/insulin/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/insulin/source/css/page.styl","path":"css/page.styl","modified":0,"renderable":1},{"_id":"themes/insulin/source/css/typo.styl","path":"css/typo.styl","modified":0,"renderable":1},{"_id":"themes/insulin/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/insulin/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/insulin/source/images/icon.png","path":"images/icon.png","modified":0,"renderable":1},{"_id":"themes/insulin/source/images/fav.png","path":"images/fav.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"e96dea0f834145b60b1233caa2aaff5ed191fcf5","modified":1682698938406},{"_id":"themes/alpha-dust/LICENSE","hash":"20fb6ab02264ce4860e25cd70b50fa86c08f1cf8","modified":1598041811000},{"_id":"themes/alpha-dust/_config.yml","hash":"4e827752e910d942baf0e7544bf832dda5a9b6ac","modified":1598041811000},{"_id":"themes/alpha-dust/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1598041811000},{"_id":"themes/alpha-dust/README.md","hash":"a45542dc41cb204cae82300daf1216ded96f4a13","modified":1598041811000},{"_id":"themes/alpha-dust/languages/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1598041811000},{"_id":"themes/alpha-dust/languages/default.yml","hash":"bc4b0f68c3579f8d9c217b96ae9d2da1991c92f7","modified":1598041811000},{"_id":"themes/alpha-dust/languages/en.yml","hash":"9debce519356b44354cf1a613f8916321e572d7f","modified":1598041811000},{"_id":"themes/alpha-dust/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1598041811000},{"_id":"themes/alpha-dust/languages/fr.yml","hash":"e9e6f7cb362ebb7997f11027498a2748fe3bac95","modified":1598041811000},{"_id":"themes/alpha-dust/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1598041811000},{"_id":"themes/alpha-dust/languages/pt.yml","hash":"1d0c3689eb32fe13f37f8f6f303af7624ebfbaf0","modified":1598041811000},{"_id":"themes/alpha-dust/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1598041811000},{"_id":"themes/alpha-dust/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1598041811000},{"_id":"themes/alpha-dust/languages/vi.yml","hash":"e402277d26045d704a8bd9fd195b9bbb905a658c","modified":1598041811000},{"_id":"themes/alpha-dust/languages/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1598041811000},{"_id":"themes/alpha-dust/languages/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1598041811000},{"_id":"themes/alpha-dust/layout/archive.ejs","hash":"535ea1205c3dd8782aa8dec64c5bb67a5e118be9","modified":1598041811000},{"_id":"themes/alpha-dust/layout/index.ejs","hash":"a3f94e4a627a83735b82d93694980e988a32d65e","modified":1598041811000},{"_id":"themes/alpha-dust/layout/page.ejs","hash":"8b54e1af70b375b92837885814d26c0629253bc1","modified":1598041811000},{"_id":"themes/alpha-dust/template/index.html","hash":"8f5f763e912a2f84306e3857b476c5cd1c048cb0","modified":1598041811000},{"_id":"themes/alpha-dust/layout/layout.ejs","hash":"2655449a77b370284e6af41aa72c7d72660008fa","modified":1598041811000},{"_id":"themes/alpha-dust/layout/post.ejs","hash":"5e1c76ceea8fb6f770b0592648d7e31ccea21a82","modified":1598041811000},{"_id":"themes/alpha-dust/template/archive.html","hash":"239ef36831f10f892ecdbf4438994d62cc973caa","modified":1598041811000},{"_id":"themes/alpha-dust/layout/_partial/after-footer.ejs","hash":"15d1d1376aabe398cce7d18ff4af41635970dd29","modified":1598041811000},{"_id":"themes/alpha-dust/layout/_partial/article-archive.ejs","hash":"460768ed91c4bf71199f01685d7af385354ffd28","modified":1598041811000},{"_id":"themes/alpha-dust/layout/_partial/article-long.ejs","hash":"f2b2d0165cb35e30c9764c324e530f487e7de59e","modified":1598041811000},{"_id":"themes/alpha-dust/template/post.html","hash":"8c586749ca621e6b24c07d792cb28c7827a0ed21","modified":1598041811000},{"_id":"themes/alpha-dust/layout/_partial/article-short.ejs","hash":"792602a61177c8059ef27efd695532f456c8ca84","modified":1598041811000},{"_id":"themes/alpha-dust/layout/_partial/comments.ejs","hash":"423529d88d45e0a928f6cfadcf9aef27ccb63c13","modified":1598041811000},{"_id":"themes/alpha-dust/layout/_partial/footer_categories.ejs","hash":"1831ae75b1deb1729e858b2cd83e32fff3a33f6f","modified":1598041811000},{"_id":"themes/alpha-dust/layout/_partial/gallery.ejs","hash":"80c3758b90fe6c197b52602456e2c4dcf7167847","modified":1598041811000},{"_id":"themes/alpha-dust/layout/_partial/footer_recent_posts.ejs","hash":"569addbbc7d548fca4986e09631489f8515280ff","modified":1598041811000},{"_id":"themes/alpha-dust/layout/_partial/head.ejs","hash":"68f2f08fef4763ffaaf1d890084e7a8ba7f86e3f","modified":1598041811000},{"_id":"themes/alpha-dust/layout/_partial/google-analytics.ejs","hash":"4e6e8de9becea5a1636a4dcadcf7a10c06e2426e","modified":1598041811000},{"_id":"themes/alpha-dust/layout/_partial/header.ejs","hash":"c189a234d36c6b5c51f814007d5d779bf42f0191","modified":1598041811000},{"_id":"themes/alpha-dust/layout/_partial/pagination.ejs","hash":"b9ec572a16d79cba2341211d7623cd04d2b6e521","modified":1598041811000},{"_id":"themes/alpha-dust/layout/_partial/menu.ejs","hash":"452e31aa3016cdf9febfe5c2597a335417873f08","modified":1598041811000},{"_id":"themes/alpha-dust/layout/_partial/tag-cat-item.ejs","hash":"62e78d4f9cccaa1f32121309498596d6b4c5f0ad","modified":1598041811000},{"_id":"themes/alpha-dust/source/css/style.styl","hash":"47e8e5969922a74d0df6f3e8686b538a22db04ae","modified":1598041811000},{"_id":"themes/alpha-dust/source/js/main.js","hash":"7ee829ab42cf4d81280d20b5d664759436b19075","modified":1598041811000},{"_id":"themes/alpha-dust/source/img/bg-pattern.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1598041811000},{"_id":"themes/alpha-dust/template/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1598041811000},{"_id":"themes/alpha-dust/template/css/style.styl","hash":"792ff84e3a2b75cbdc216c8b37089eff0c4ec6bc","modified":1598041811000},{"_id":"themes/alpha-dust/layout/_partial/footer.ejs","hash":"cc7cbd208e1f7f2e961953f28f5e6c6bb34b5302","modified":1598041811000},{"_id":"themes/alpha-dust/template/css/style.css","hash":"50bf62012aa42d76e71ef6c6d359e0c6b02f1f41","modified":1598041811000},{"_id":"themes/alpha-dust/template/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1598041811000},{"_id":"themes/alpha-dust/template/img/bg-pattern-blue.png","hash":"07016986a35c5bfc04c1599829d6a4798c966731","modified":1598041811000},{"_id":"themes/alpha-dust/template/img/bg-pattern.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1598041811000},{"_id":"themes/alpha-dust/template/img/hex-bg.png","hash":"a8444a553dd0fd7db09eda830bd3346cc87fc60e","modified":1598041811000},{"_id":"themes/alpha-dust/source/css/_partial/archive.styl","hash":"77f7b4341cb8d12191035150de6bb04635eb2a89","modified":1598041811000},{"_id":"themes/alpha-dust/template/js/main.js","hash":"656d203e231f4533d97654816ff285fcbdfd0956","modified":1598041811000},{"_id":"themes/alpha-dust/source/css/_partial/base.styl","hash":"f01047771a92520cf318930331517f4c9e70c04a","modified":1598041811000},{"_id":"themes/alpha-dust/source/css/_partial/code.styl","hash":"3d2bbfef131c2f3fc5d44f54597da850ce29e2cf","modified":1598041811000},{"_id":"themes/alpha-dust/source/css/_partial/header.styl","hash":"2e1e2ab562719127c7e216a49f8d7c02f9a0c2c4","modified":1598041811000},{"_id":"themes/alpha-dust/source/css/_partial/footer.styl","hash":"0a086dfb77bc55b27378f97e442e3a696f69048f","modified":1598041811000},{"_id":"themes/alpha-dust/source/css/_partial/menu.styl","hash":"746c0bc7b37096b5f0f0a451c4783a054b22c309","modified":1598041811000},{"_id":"themes/alpha-dust/source/css/_partial/pagination.styl","hash":"2368cc9bd2404bce950b55fb2d9be3e7f1e1039c","modified":1598041811000},{"_id":"themes/alpha-dust/source/css/_partial/post-content.styl","hash":"117b655a4f0c78b3cb3fb7be3e09b829c1debc49","modified":1598041811000},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1598041811000},{"_id":"themes/alpha-dust/template/img/bg-pattern copy.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1598041811000},{"_id":"themes/alpha-dust/template/img/session_image.jpeg","hash":"5a3669c0564044f56cb7cea464119a8e388fb18f","modified":1598041811000},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1598041811000},{"_id":"themes/alpha-dust/source/css/_partial/post-layout.styl","hash":"b60fbbd78ca88d2174db1426cf941b6c998dd823","modified":1598041811000},{"_id":"themes/alpha-dust/source/css/_partial/variables.styl","hash":"789108805cf6d536b8a979a722b5b26a7e27fb28","modified":1598041811000},{"_id":"themes/alpha-dust/template/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1598041811000},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1598041811000},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1598041811000},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1598041811000},{"_id":"themes/A-RSnippet/exampleSite/source/js/arsnippet.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517343614000},{"_id":"themes/A-RSnippet/.gitignore","hash":"2851ba7682bb8e132da4511e7d3d769c6f247858","modified":1517343614000},{"_id":"themes/A-RSnippet/.travis.yml","hash":"f5a729471c2cc0d37541729f28c0e115e51122e2","modified":1517343614000},{"_id":"themes/A-RSnippet/LICENSE","hash":"8624bcdae55baeef00cd11d5dfcfa60f68710a02","modified":1517343614000},{"_id":"themes/A-RSnippet/README.md","hash":"4e314c8b1228edec85e9084eb9a460558333b196","modified":1517343614000},{"_id":"themes/A-RSnippet/_config.yml","hash":"945b6cc002a032b3ee86773d96ac3db32ee19326","modified":1517343614000},{"_id":"themes/A-RSnippet/package.json","hash":"12541fbf56f785e4f5d486a55b4939f3033f625b","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/_config.yml","hash":"29e4eb9902beb19323d9c39ddc6ea347da30307e","modified":1517343614000},{"_id":"themes/A-RSnippet/languages/en.yml","hash":"5e6f4d0bef92dbfc46d29bd8be4b04f4a2ae4eb1","modified":1517343614000},{"_id":"themes/A-RSnippet/languages/zh-Hans.yml","hash":"81b2ec17006c7a4e3919983bd0e3816e094e4546","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/404.ejs","hash":"873c271efce8167c38afdbd010de4881a88186b2","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/archive.ejs","hash":"6b13f97f8c5a1f70d7c10785c05d07ae96ee1ae5","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/index.ejs","hash":"bd1d7e737f3fd93d413bd77f6b0ff79b21780e38","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/layout.ejs","hash":"40c380b4c3f312b83c0d2d1b7f6eaeb169b9072a","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/leetcode.ejs","hash":"23a0ba4817784a7db855cd85cb44db3267471459","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/list-category-leetcode.ejs","hash":"2ab1c74a8137da3573f2bb03563a846f751f55e7","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/list-tag-leetcode.ejs","hash":"d888a04f83291305a65c53c44c9bcf114bcffb23","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/page.ejs","hash":"fd1fd95164d56826759e670389f0d5913fdb9385","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/poem.ejs","hash":"4c29d3524acdc417e26da13dfeeeedb273f8c922","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/portfolio-slim.ejs","hash":"5a7358a83bc22506cf5d1b302b9fc1327c5a613c","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/post.ejs","hash":"15fe645a00c689411fc12a7d26d184368a729c9a","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/tag.ejs","hash":"f11f5f8b247cc03469c2d8982e7b023422513b4f","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/scaffolds/draft.md","hash":"204ab550ddffa92051ea0eb2484a78d84dac3693","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/scaffolds/leetcode.md","hash":"7b7682fd5e2af2d84cae87a6357daa4b27973ed4","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/scaffolds/portfolio-slim.md","hash":"aa5fefb4e0d18e709aa541c84b3d9461600997b1","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/scaffolds/post.md","hash":"473b3d88168fab7ad6a653e134ecaf09bd3a9f3b","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/_partial/comments.ejs","hash":"26a29e2579713c962aaefdc34266da5f6e899f09","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/_partial/footer.ejs","hash":"8c763d0b8c9ff4aad7613bb54ca8fbff45d593d2","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/_partial/head.ejs","hash":"5af8813e7ae8a8a6bf5e79ed2243f2486b78fa4d","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/_partial/header.ejs","hash":"bce1b0070fc3e61ae733efce68d4c0a5ebdc570f","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/_partial/index-post-list.ejs","hash":"d2e758467bc94faeb1e8cd9672308eac2fb9d8bc","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/_partial/nav.ejs","hash":"a3fa51c4a1c40f6788d90677e4f81cb064fa1f7e","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/_partial/pagination.ejs","hash":"303d5b709666446b340194d42d01bf1b30a59cfd","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/_partial/sidebar-profile.ejs","hash":"5bb8c5fb6dcd8379b1c932271df42d60fd9a0103","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/_partial/toc.ejs","hash":"7af17dff57fb89d547b9440273c9523dc17172f8","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/_third-party/mathjax.ejs","hash":"4b5225684c369ccfc9d2a8ecc2a2f77c535d7dcb","modified":1517343614000},{"_id":"themes/A-RSnippet/source/css/highlight.styl","hash":"8056f54f14b0c88c640e3e8c8aef2b20e03ac701","modified":1517343614000},{"_id":"themes/A-RSnippet/source/css/main.css","hash":"7af3c8f6d43f40fbbae66aa40802bd55adfa94f4","modified":1517343614000},{"_id":"themes/A-RSnippet/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1517343614000},{"_id":"themes/A-RSnippet/source/js/main.js","hash":"d8fb53a02d2d6d3c564459ac83799dcc795ab627","modified":1517343614000},{"_id":"themes/A-RSnippet/source/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/_posts/chinese-poem-test.md","hash":"06362314d8134a42eef83815e11a322cb07d31f8","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/_posts/chinese-traditional-test.md","hash":"9ed97653eca2a8f58bb1dda1b2f5b88b1d16ea38","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/404/index.md","hash":"3973c31db0c997c60151c046db3b04e0ecc25f11","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/_posts/chinese-simplified-test.md","hash":"6af4fb7e1820d51138fb2be8a1ed2379e5f0489b","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/_posts/elements.md","hash":"5e75ed868d1985010c2d26a1330cbedd9c468101","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/_posts/japanese-poem-test.md","hash":"423c6c08fdfdc655a1688ce95d931533fb621b4c","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/_posts/japanese-test.md","hash":"9b10473a998d44f28d12229b9da18a093f26fdec","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/_posts/long-title.md","hash":"b1bc2a7662802e06ba15922bde026a60d33fe581","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/_posts/poem-background-img-test.md","hash":"acefb1f326df54ed6f6a4b81769d25251a7bb0a3","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/_posts/portfolio-slim.md","hash":"6cd484926d2d1c891797c7b9182097b2a9bdc1b0","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/_posts/tutorial.md","hash":"d7346f81223acffe952111c45fa1483b1b0a6f92","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/archives/index.md","hash":"4a838863ef214ce03448460228f1279d4d62aeec","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/css/arsnippet.css","hash":"7944e80ef16a74b2e3363ffe3d197d5d86bb9977","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/img/discord.png","hash":"ccae44935b56370592c162845297d52b84308e3a","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/img/patreon.png","hash":"0ff59cd5428fa8bc8687c2d381f71c69accf394c","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/img/sky-clouds-moon-horizon.jpg","hash":"862299332b797d6340f2c88efda3da076a8e7b5e","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/leetcode-category/index.md","hash":"b185d1cb54afe0e3789f366c96cb3ca0942093fb","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/leetcode-tag/index.md","hash":"8d5ff81b6db6ef70a6d0488df3efd2ded02cdf54","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/support/index.md","hash":"02bbb02cd10cbbb5bdab83260765f368e1d1723b","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/tags/index.md","hash":"da36c3d2eac3146a13054450cd7f270bc901007b","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/_third-party/analytics/baidu-analytics.ejs","hash":"98f6a77823bfd397894c43b1db5133f92c8cbcf9","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/_third-party/analytics/google-analytics.ejs","hash":"930773939383a8f39e3fc2c33133c61718eda8ce","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/_third-party/analytics/index.ejs","hash":"8aabd65162e3fad77047b3ea56682c071f38818c","modified":1517343614000},{"_id":"themes/A-RSnippet/layout/_third-party/share/add-this.ejs","hash":"f10c232f55d3385ff1d3324ad195382cec720558","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/_posts/elements/copyright-free-images.jpg","hash":"62898e1f6f512340365a9968bb5e1ee542b11bec","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/_posts/leetcode/000-Two-Sum.md","hash":"a52eed4738d7a397790b8604b8b42b62efde5505","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/_posts/leetcode/005-Longest-Palindromic-Substring.md","hash":"35dbd86197cc43b77aca95793f3f72f1fb2dbbd7","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/_posts/leetcode/049-Group-Anagrams.md","hash":"568dc977246f9d4652ac86d0e0beb2c2477a4aad","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/_posts/portfolio-slim/random-quote-machine.png","hash":"f6704a287939fc4d146427c957f063345eb97890","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/_posts/tutorial/exampleSite.png","hash":"65c8734e5c8875e97eac65daf8e3d7ccff7b8074","modified":1517343614000},{"_id":"themes/A-RSnippet/source/css/bootstrap.min.css","hash":"c5db932e115ff97af7b4512b947cde3ba2964db8","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/img/forum.jpg","hash":"a6a28ae01b9bebc6d2a2a6f83fa961fe448b1f29","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/img/post-header-bg.jpg","hash":"9db4460d0c60515df6a2087de4c0f7144d23c0e0","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/_posts/portfolio-slim/Awesome-Checklist-Checklist.png","hash":"bd5fd2ccc04d06b1d48c99e32eeaefc3d4ea32eb","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/_posts/tutorial/A-RSnippet.png","hash":"e1ef42908c4522076bb1aa281717e642fc683955","modified":1517343614000},{"_id":"themes/A-RSnippet/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/_posts/poem-background-img-test/background-img.jpg","hash":"40ef0d24d462450aa0c4fb92a025a7ccbc537921","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/_posts/tutorial/candle-animation.gif","hash":"d77688429261bba82d85fea2cb910a1df2ed8d07","modified":1517343614000},{"_id":"themes/A-RSnippet/exampleSite/source/support/index/bike-cycle.gif","hash":"258f57ad2274764682d30674659a866f359d105f","modified":1517343614000},{"_id":"themes/dev-dark-theme/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1613575413000},{"_id":"themes/dev-dark-theme/README.md","hash":"49af5a0b310894ca78956faa5305fbf51201bd0b","modified":1613575413000},{"_id":"themes/dev-dark-theme/_config.yml","hash":"c7404652351e279761fa79d87742a27fe14bfd9b","modified":1613575413000},{"_id":"themes/dev-dark-theme/package.json","hash":"a04c29e99d9ed6f8f263bd424f8fae6d9ec5f228","modified":1613575413000},{"_id":"themes/dev-dark-theme/.vscode/settings.json","hash":"909e2cc26f049bffd06d7fa551f43e28739d7901","modified":1613575413000},{"_id":"themes/dev-dark-theme/scaffolds/draft.md","hash":"65044b80caa752fa2da2f99806ee36de826ce2e1","modified":1613575413000},{"_id":"themes/dev-dark-theme/scaffolds/page.md","hash":"f0af1cb10f27d859caa51c8e3704469d9ed842a6","modified":1613575413000},{"_id":"themes/dev-dark-theme/scaffolds/post.md","hash":"b09468f7586295d91899e6deac02cc121b6f037e","modified":1613575413000},{"_id":"themes/dev-dark-theme/source/CNAME","hash":"b69781b87dae7ff7c1846ade99c38dee216030a0","modified":1613575413000},{"_id":"themes/dev-dark-theme/source/robots.txt","hash":"ed51e722592d61083cbb73e5b926e2672d927f1f","modified":1613575413000},{"_id":"themes/dev-dark-theme/source/_posts/pt/About-Theme.md","hash":"f763f8d154f18ac9705538a69ec6bc6dd3d0d69e","modified":1613575413000},{"_id":"themes/dev-dark-theme/source/_posts/pt/Configuration.md","hash":"d1a892a822ac4ec57dd2567eb6fab934d313d0b9","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/_config.yml","hash":"a761d936942d1045199e30738bd413c5b230a390","modified":1613575413000},{"_id":"themes/dev-dark-theme/source/_posts/pt/Contact.md","hash":"64cbd2fd8cc2c3d17184fee7b522d41015fb279b","modified":1613575413000},{"_id":"themes/dev-dark-theme/source/_posts/pt/Getting-Started.md","hash":"a6d94fbe8ab8c4689b4d9623afe04f234094aaab","modified":1613575413000},{"_id":"themes/dev-dark-theme/source/_posts/pt/Using-Dev-Dark-Theme.md","hash":"6e7420cb7f3faf69299e58bba02e8fcbf4982d2b","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/languages/default.yml","hash":"bed033a92581d958aae2adac40e90883306277f0","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/languages/en.yml","hash":"2bda97cb13bb9733cef5172ca38928288d14118e","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/languages/pt.yml","hash":"f8ae7de8d3bc0d6ae1f27ceed3606d5f806aaf96","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/index.ejs","hash":"1777397e6c12e761bc5ba3b71b0072cf93e82cf6","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/category.ejs","hash":"701029361b33c1848f0155dd233fb284885e24f8","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/layout.ejs","hash":"2f13f69391510fca8714f0f0c0fdc704fec08ff9","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/page.ejs","hash":"0d000eeac1052c920e32e31b5364702ed8bf1a5e","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/post.ejs","hash":"81e3339a5c5bd3a47b0367b99dca2fb87e72461e","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/tag.ejs","hash":"974f3a91eec36f699cd984e3b2f969f6edf29c00","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/scripts/index.js","hash":"2f173b2de7499559ad92911c1a3598f482d06515","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/partial/analytics.ejs","hash":"173167d582274837d792d761433ee468b11d54be","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/partial/comments.ejs","hash":"1c2626c7323d1811fc2f6af1cd91a61cbda5c64a","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/partial/footer.ejs","hash":"82af492ce95989c6305419821285472867c079ad","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/partial/head.ejs","hash":"d295120d8f7a7196c927ba750fb72345e7f9ccb6","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/partial/header.ejs","hash":"2c69c034948a62072a2a42bdd34832eab0528a21","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/partial/nav-header.ejs","hash":"d4aa1c33d67dfd038396ee45cfba6321862a8ffb","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/partial/post-item.ejs","hash":"5af66d0f6c44f871124ddcfb4e487a5fda803631","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/partial/script-comment.ejs","hash":"841d10a25ae23adcc7d470f6d0eca5a1586c26b0","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/partial/svg-icons.ejs","hash":"e7c80f884faf701175ce6ed8dc1ded8e0bbbc7c2","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/source/css/highlight.css","hash":"61e5f9e279a7752b6bc1a8c940409415ed79b497","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/source/css/style.css","hash":"7d01913e81333f17ee27a8d8d7e2ae67abb1a61a","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/source/css/style.min.css","hash":"9cad1a924dfde299a37994cdd7620838d82bf3d3","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/source/css/variables.css","hash":"3c42d3b9cc32263b7298162bed81a2551f896fd9","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/source/scripts/script.js","hash":"8e453be7aa7779291629a4ba2265c6bfeec6d445","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/source/scripts/script.min.js","hash":"315358218e6f519d7cde5be85512cf595570cf2d","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/partial/category/header.ejs","hash":"1a531126cbcae5745a597e505b3718ae60bdcc21","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/partial/page/header.ejs","hash":"90a7514e070c21f15bf4e3a0bfc2749a4881bd61","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/partial/post/footer.ejs","hash":"07b5552d4438c2888d0d211006df546788331115","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/partial/post/header.ejs","hash":"13bfecf05a54c121ae0c37109d077be26c5e4150","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/partial/seo/structured-data.ejs","hash":"41de52935103cc0784ad18f7d8252d3a0c9ca98f","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/partial/social/links.ejs","hash":"f64e355aa147c4651aca8a91ee7a313ac9870bf2","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/partial/social/share.ejs","hash":"7039dbe19bbd29fac37805ac8a54d69faaad08f1","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/layout/partial/tag/header.ejs","hash":"dac12000ab9a795c7b9167a8a58771bc1453cf15","modified":1613575413000},{"_id":"themes/dev-dark-theme/package-lock.json","hash":"2211798620c0468b5b5e21d07eba1d8184252a29","modified":1613575413000},{"_id":"themes/dev-dark-theme/themes/dev-dark-theme/source/images/header.jpg","hash":"f70562218786e20fae2de6e9512312c2a88ec720","modified":1613575413000},{"_id":"themes/insulin/.gitattributes","hash":"ddc69d8ab0afb98e47340e5787ffcaf63b356995","modified":1607147435000},{"_id":"themes/insulin/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1607147435000},{"_id":"themes/insulin/README.md","hash":"0ae47642a2f73dd835f415e87af784a436607370","modified":1607147435000},{"_id":"themes/insulin/_config.yml","hash":"996fd7fc9666bf05daa4dbc285934ef2df017f11","modified":1682701008356},{"_id":"themes/insulin/languages/en.yml","hash":"29927086cc27b4a63cf94be092a7e6e81250e307","modified":1607147435000},{"_id":"themes/insulin/languages/zh-CN.yml","hash":"7af989a9f0d06cf6c2d936aea0c636d7dcbd53b4","modified":1607147435000},{"_id":"themes/insulin/layout/archive.ejs","hash":"76f263388c7085d65946dcd47a1869203102fbad","modified":1607147435000},{"_id":"themes/insulin/layout/category.ejs","hash":"9342d130a55ad7a156a22bde2a78d76b1e57c7e1","modified":1607147435000},{"_id":"themes/insulin/layout/index.ejs","hash":"70f8f2a056195e047e954ac5aa9b9c3ab981d22f","modified":1607147435000},{"_id":"themes/insulin/layout/layout.ejs","hash":"6f12f1ebd0346edf0ce1a45f7ec5555bd69edfdf","modified":1607147435000},{"_id":"themes/insulin/layout/page.ejs","hash":"8ed5f5f0b2388204f566cdc485646e3cab7b877e","modified":1607147435000},{"_id":"themes/insulin/layout/tag.ejs","hash":"830b60994c7f67b510687010eb531b8dd1484945","modified":1607147435000},{"_id":"themes/insulin/layout/post.ejs","hash":"0f1ecc05df9bf6b5d5b204d1d05b19e4c9610e61","modified":1607147435000},{"_id":"themes/insulin/layout/_partial/head.ejs","hash":"6bd9c1ed3c4734b00e0659ad571720b5a9a8becd","modified":1607147435000},{"_id":"themes/insulin/layout/_partial/header.ejs","hash":"ddb48f26a5e8410d1532742b08bd22e93ed7e453","modified":1607147435000},{"_id":"themes/insulin/layout/_partial/load.ejs","hash":"86fde71376c214611f53998d52b30b4e7470bc9b","modified":1607147435000},{"_id":"themes/insulin/layout/_partial/post-header.ejs","hash":"fa94a0ebb0c9de334caf03e077c4396afd2ee124","modified":1607147435000},{"_id":"themes/insulin/layout/_partial/sidebar.ejs","hash":"36b10c0e758a17debcd2971a08b6594ac289abab","modified":1682699820906},{"_id":"themes/insulin/source/css/highlight.styl","hash":"443bb9cf51acc2596c732f7bed065ce3f24c6e17","modified":1607147435000},{"_id":"themes/insulin/source/css/main.styl","hash":"adee9b6101f11b8fd3bf0f6af5171e2500352a12","modified":1682702865982},{"_id":"themes/insulin/source/css/page.styl","hash":"68ea1bd0a0c2ff51843f8e1adbdac6149837ca65","modified":1607147435000},{"_id":"themes/insulin/source/css/typo.styl","hash":"2c4d4a841414a1fc9707848ab06a10d22165d174","modified":1607147435000},{"_id":"themes/insulin/source/js/main.js","hash":"9b9cd67566f17e671cbc9c23becfb87840a87999","modified":1607147435000},{"_id":"themes/insulin/layout/_plugin/analytics/baidu-analytics.ejs","hash":"eb3b16d53b191c724853a76a671f001bf2146b44","modified":1607147435000},{"_id":"themes/insulin/layout/_plugin/analytics/cnzz-analytics.ejs","hash":"3c94798a0031383fabefbf847be5cb42f2ff5573","modified":1607147435000},{"_id":"themes/insulin/layout/_plugin/analytics/google-analytics.ejs","hash":"204d526b1c58b8ce36f73cc2057f970e70618357","modified":1607147435000},{"_id":"themes/insulin/layout/_plugin/analytics/index.ejs","hash":"d4c82babc2d3c15bec049ba0f9da5ec9049427fc","modified":1607147435000},{"_id":"themes/insulin/layout/_plugin/analytics/tencent-analytics.ejs","hash":"99c9077c5d83d002d97d568211b8c03f291af288","modified":1607147435000},{"_id":"themes/insulin/layout/_plugin/comment/index.ejs","hash":"6be538fea88f28c5909443d99e3ec294432daed6","modified":1607147435000},{"_id":"themes/insulin/layout/_plugin/comment/load.ejs","hash":"341e8597d325f9152f0f5269504e583fe348a36a","modified":1607147435000},{"_id":"themes/insulin/layout/_plugin/math/index.ejs","hash":"91bf8a8e72c53198e518d788c6e239756262b6c8","modified":1607147435000},{"_id":"themes/insulin/layout/_plugin/math/katex.ejs","hash":"bf414ee8b9cadfeacc544c683ec01881c10e0430","modified":1607147435000},{"_id":"themes/insulin/layout/_plugin/math/mathjax.ejs","hash":"9d7af5c07e333d1313484728becb7cc6cb64953f","modified":1607147435000},{"_id":"source/constantes-e-variaveis/index.md","hash":"3e69248c23f97c9e2ea7f47611020831a26d8662","modified":1682613237609},{"_id":"source/_posts/variaveis-e-constantes.md","hash":"3d350ebd2681ded963a269cb3a68d452bfba2f22","modified":1682707307046},{"_id":"source/about/index.md","hash":"64325ff695a6f67336b20e0ee6558a9730bd0acb","modified":1682613712150},{"_id":"themes/insulin/source/images/avatar.jpeg","hash":"9392038259af26ccdb04a7f890cc84fa24713c7a","modified":1682617915320},{"_id":"themes/insulin/source/images/icone.png","hash":"4b22c4aa21b62fa6818581096a17fac02f73e303","modified":1682699343038},{"_id":"themes/insulin/source/images/fav.png","hash":"1f1ede86fb2f65b7dc5b1adc8be5de135bec4cb9","modified":1682699524986},{"_id":"themes/insulin/source/images/icon.png","hash":"4b22c4aa21b62fa6818581096a17fac02f73e303","modified":1682699343038},{"_id":"source/_posts/Operadores-Javascript.md","hash":"5c963e759865c139bd953412728eba2cdfacecf2","modified":1682708232000}],"Category":[{"name":"teste","_id":"clh0ri2ns0002u6zyg8vd8k93"},{"name":"javascript","_id":"clh0rj3pa0004u6zy34kwcyh2"}],"Data":[],"Page":[{"title":"constantes e variáveis","date":"2023-04-27T16:33:57.000Z","_content":"","source":"constantes-e-variaveis/index.md","raw":"---\ntitle: constantes e variáveis\ndate: 2023-04-27 13:33:57\n---\n","updated":"2023-04-27T16:33:57.609Z","path":"constantes-e-variaveis/index.html","comments":1,"layout":"page","_id":"clgzchdi20000g9zy2o6m7bbo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2023-04-27T16:41:52.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-04-27 13:41:52\n---\n","updated":"2023-04-27T16:41:52.150Z","path":"about/index.html","comments":1,"layout":"page","_id":"clgzcriz10000x4zy64ys0obc","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags: welcome\ncategory: teste\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-04-27T13:33:01.634Z","updated":"2023-04-28T16:22:18.406Z","_id":"clgz6615p0000ivzy9zfc2g0e","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"variáveis e constantes","date":"2023-04-27T16:35:49.000Z","_content":"\n# Variáveis e Constantes no JavaScript\n\nJavaScript é uma linguagem de programação dinâmica e flexível que permite aos desenvolvedores declarar variáveis e constantes para armazenar valores em seu código.\nVariáveis\n\nUma variável é um espaço de armazenamento que pode conter um valor ou uma referência a um valor. No JavaScript, as variáveis são declaradas usando a palavra-chave var, let ou const. Por exemplo, para declarar uma variável chamada idade com um valor de 30, podemos usar o seguinte código:\n\n```javascript\nvar idade = 30;\n\nlet idade = 30;\n\nconst idade = 30;\n```\n\nAs variáveis declaradas com a palavra-chave var ou let podem ter seus valores alterados ao longo do tempo, enquanto as variáveis declaradas com a palavra-chave const são constantes e não podem ter seus valores alterados.\n\n```javascript\nlet nome = \"João\";\nnome = \"Maria\"; // valor alterado\n\nconst PI = 3.1415;\nPI = 3; // erro, o valor de uma constante não pode ser alterado\n```\n\n### Constantes\n\nAs constantes são variáveis que têm um valor imutável. Em outras palavras, o valor atribuído a uma constante não pode ser alterado depois que a constante é declarada. No JavaScript, as constantes são declaradas usando a palavra-chave const. Por exemplo:\n\n```javascript\nconst PI = 3.1415;\n```\n\nAo declarar uma constante, é necessário atribuir um valor a ela. Se nenhum valor for atribuído, ocorrerá um erro.\n\n```javascript\nconst PI; // erro, uma constante precisa ter um valor atribuído\n```\n\n### Escopo de Variáveis e Constantes\n\nO escopo de uma variável ou constante é a parte do código onde ela pode ser acessada. No JavaScript, existem dois tipos de escopos: escopo global e escopo local.\n\nVariáveis e constantes declaradas fora de uma função têm escopo global, o que significa que elas podem ser acessadas em todo o código.\n\n```javascript\nvar nome = \"João\"; // variável global\n\nfunction exemplo() {\n  console.log(nome); // \"João\" será impresso no console\n}\n\nexemplo();\n```\n\nVariáveis e constantes declaradas dentro de uma função têm escopo local, o que significa que elas só podem ser acessadas dentro dessa função.\n\n```javascript\nfunction exemplo() {\n  var nome = \"João\"; // variável local\n  console.log(nome); // \"João\" será impresso no console\n}\n\nexemplo();\nconsole.log(nome); // erro, a variável nome não pode ser acessada fora da função exemplo\n```\n\n### Conclusão\n\nAs variáveis e constantes são ferramentas essenciais para o desenvolvimento em JavaScript. Elas permitem que os desenvolvedores armazenem valores e referências a valores em seus códigos, além de ajudar a manter a organização e a legibilidade do código. É importante entender a diferença entre variáveis e constantes, bem como o escopo em que elas são definidas, para evitar erros e maximizar a eficiência do código.\n\n","source":"_posts/variaveis-e-constantes.md","raw":"---\ntitle: variáveis e constantes\ndate: 2023-04-27 13:35:49\ntags:\ncategory: javascript\n---\n\n# Variáveis e Constantes no JavaScript\n\nJavaScript é uma linguagem de programação dinâmica e flexível que permite aos desenvolvedores declarar variáveis e constantes para armazenar valores em seu código.\nVariáveis\n\nUma variável é um espaço de armazenamento que pode conter um valor ou uma referência a um valor. No JavaScript, as variáveis são declaradas usando a palavra-chave var, let ou const. Por exemplo, para declarar uma variável chamada idade com um valor de 30, podemos usar o seguinte código:\n\n```javascript\nvar idade = 30;\n\nlet idade = 30;\n\nconst idade = 30;\n```\n\nAs variáveis declaradas com a palavra-chave var ou let podem ter seus valores alterados ao longo do tempo, enquanto as variáveis declaradas com a palavra-chave const são constantes e não podem ter seus valores alterados.\n\n```javascript\nlet nome = \"João\";\nnome = \"Maria\"; // valor alterado\n\nconst PI = 3.1415;\nPI = 3; // erro, o valor de uma constante não pode ser alterado\n```\n\n### Constantes\n\nAs constantes são variáveis que têm um valor imutável. Em outras palavras, o valor atribuído a uma constante não pode ser alterado depois que a constante é declarada. No JavaScript, as constantes são declaradas usando a palavra-chave const. Por exemplo:\n\n```javascript\nconst PI = 3.1415;\n```\n\nAo declarar uma constante, é necessário atribuir um valor a ela. Se nenhum valor for atribuído, ocorrerá um erro.\n\n```javascript\nconst PI; // erro, uma constante precisa ter um valor atribuído\n```\n\n### Escopo de Variáveis e Constantes\n\nO escopo de uma variável ou constante é a parte do código onde ela pode ser acessada. No JavaScript, existem dois tipos de escopos: escopo global e escopo local.\n\nVariáveis e constantes declaradas fora de uma função têm escopo global, o que significa que elas podem ser acessadas em todo o código.\n\n```javascript\nvar nome = \"João\"; // variável global\n\nfunction exemplo() {\n  console.log(nome); // \"João\" será impresso no console\n}\n\nexemplo();\n```\n\nVariáveis e constantes declaradas dentro de uma função têm escopo local, o que significa que elas só podem ser acessadas dentro dessa função.\n\n```javascript\nfunction exemplo() {\n  var nome = \"João\"; // variável local\n  console.log(nome); // \"João\" será impresso no console\n}\n\nexemplo();\nconsole.log(nome); // erro, a variável nome não pode ser acessada fora da função exemplo\n```\n\n### Conclusão\n\nAs variáveis e constantes são ferramentas essenciais para o desenvolvimento em JavaScript. Elas permitem que os desenvolvedores armazenem valores e referências a valores em seus códigos, além de ajudar a manter a organização e a legibilidade do código. É importante entender a diferença entre variáveis e constantes, bem como o escopo em que elas são definidas, para evitar erros e maximizar a eficiência do código.\n\n","slug":"variaveis-e-constantes","published":1,"updated":"2023-04-28T18:41:47.046Z","_id":"clgzcjny50000lxzy48j7eyzj","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Variaveis-e-Constantes-no-JavaScript\"><a href=\"#Variaveis-e-Constantes-no-JavaScript\" class=\"headerlink\" title=\"Variáveis e Constantes no JavaScript\"></a>Variáveis e Constantes no JavaScript</h1><p>JavaScript é uma linguagem de programação dinâmica e flexível que permite aos desenvolvedores declarar variáveis e constantes para armazenar valores em seu código.<br>Variáveis</p>\n<p>Uma variável é um espaço de armazenamento que pode conter um valor ou uma referência a um valor. No JavaScript, as variáveis são declaradas usando a palavra-chave var, let ou const. Por exemplo, para declarar uma variável chamada idade com um valor de 30, podemos usar o seguinte código:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> idade = <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> idade = <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> idade = <span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure>\n\n<p>As variáveis declaradas com a palavra-chave var ou let podem ter seus valores alterados ao longo do tempo, enquanto as variáveis declaradas com a palavra-chave const são constantes e não podem ter seus valores alterados.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> nome = <span class=\"string\">&quot;João&quot;</span>;</span><br><span class=\"line\">nome = <span class=\"string\">&quot;Maria&quot;</span>; <span class=\"comment\">// valor alterado</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PI</span> = <span class=\"number\">3.1415</span>;</span><br><span class=\"line\"><span class=\"variable constant_\">PI</span> = <span class=\"number\">3</span>; <span class=\"comment\">// erro, o valor de uma constante não pode ser alterado</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Constantes\"><a href=\"#Constantes\" class=\"headerlink\" title=\"Constantes\"></a>Constantes</h3><p>As constantes são variáveis que têm um valor imutável. Em outras palavras, o valor atribuído a uma constante não pode ser alterado depois que a constante é declarada. No JavaScript, as constantes são declaradas usando a palavra-chave const. Por exemplo:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PI</span> = <span class=\"number\">3.1415</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Ao declarar uma constante, é necessário atribuir um valor a ela. Se nenhum valor for atribuído, ocorrerá um erro.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PI</span>; <span class=\"comment\">// erro, uma constante precisa ter um valor atribuído</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Escopo-de-Variaveis-e-Constantes\"><a href=\"#Escopo-de-Variaveis-e-Constantes\" class=\"headerlink\" title=\"Escopo de Variáveis e Constantes\"></a>Escopo de Variáveis e Constantes</h3><p>O escopo de uma variável ou constante é a parte do código onde ela pode ser acessada. No JavaScript, existem dois tipos de escopos: escopo global e escopo local.</p>\n<p>Variáveis e constantes declaradas fora de uma função têm escopo global, o que significa que elas podem ser acessadas em todo o código.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nome = <span class=\"string\">&quot;João&quot;</span>; <span class=\"comment\">// variável global</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">exemplo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nome); <span class=\"comment\">// &quot;João&quot; será impresso no console</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">exemplo</span>();</span><br></pre></td></tr></table></figure>\n\n<p>Variáveis e constantes declaradas dentro de uma função têm escopo local, o que significa que elas só podem ser acessadas dentro dessa função.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">exemplo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> nome = <span class=\"string\">&quot;João&quot;</span>; <span class=\"comment\">// variável local</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nome); <span class=\"comment\">// &quot;João&quot; será impresso no console</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">exemplo</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nome); <span class=\"comment\">// erro, a variável nome não pode ser acessada fora da função exemplo</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Conclusao\"><a href=\"#Conclusao\" class=\"headerlink\" title=\"Conclusão\"></a>Conclusão</h3><p>As variáveis e constantes são ferramentas essenciais para o desenvolvimento em JavaScript. Elas permitem que os desenvolvedores armazenem valores e referências a valores em seus códigos, além de ajudar a manter a organização e a legibilidade do código. É importante entender a diferença entre variáveis e constantes, bem como o escopo em que elas são definidas, para evitar erros e maximizar a eficiência do código.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Variaveis-e-Constantes-no-JavaScript\"><a href=\"#Variaveis-e-Constantes-no-JavaScript\" class=\"headerlink\" title=\"Variáveis e Constantes no JavaScript\"></a>Variáveis e Constantes no JavaScript</h1><p>JavaScript é uma linguagem de programação dinâmica e flexível que permite aos desenvolvedores declarar variáveis e constantes para armazenar valores em seu código.<br>Variáveis</p>\n<p>Uma variável é um espaço de armazenamento que pode conter um valor ou uma referência a um valor. No JavaScript, as variáveis são declaradas usando a palavra-chave var, let ou const. Por exemplo, para declarar uma variável chamada idade com um valor de 30, podemos usar o seguinte código:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> idade = <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> idade = <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> idade = <span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure>\n\n<p>As variáveis declaradas com a palavra-chave var ou let podem ter seus valores alterados ao longo do tempo, enquanto as variáveis declaradas com a palavra-chave const são constantes e não podem ter seus valores alterados.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> nome = <span class=\"string\">&quot;João&quot;</span>;</span><br><span class=\"line\">nome = <span class=\"string\">&quot;Maria&quot;</span>; <span class=\"comment\">// valor alterado</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PI</span> = <span class=\"number\">3.1415</span>;</span><br><span class=\"line\"><span class=\"variable constant_\">PI</span> = <span class=\"number\">3</span>; <span class=\"comment\">// erro, o valor de uma constante não pode ser alterado</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Constantes\"><a href=\"#Constantes\" class=\"headerlink\" title=\"Constantes\"></a>Constantes</h3><p>As constantes são variáveis que têm um valor imutável. Em outras palavras, o valor atribuído a uma constante não pode ser alterado depois que a constante é declarada. No JavaScript, as constantes são declaradas usando a palavra-chave const. Por exemplo:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PI</span> = <span class=\"number\">3.1415</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Ao declarar uma constante, é necessário atribuir um valor a ela. Se nenhum valor for atribuído, ocorrerá um erro.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PI</span>; <span class=\"comment\">// erro, uma constante precisa ter um valor atribuído</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Escopo-de-Variaveis-e-Constantes\"><a href=\"#Escopo-de-Variaveis-e-Constantes\" class=\"headerlink\" title=\"Escopo de Variáveis e Constantes\"></a>Escopo de Variáveis e Constantes</h3><p>O escopo de uma variável ou constante é a parte do código onde ela pode ser acessada. No JavaScript, existem dois tipos de escopos: escopo global e escopo local.</p>\n<p>Variáveis e constantes declaradas fora de uma função têm escopo global, o que significa que elas podem ser acessadas em todo o código.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nome = <span class=\"string\">&quot;João&quot;</span>; <span class=\"comment\">// variável global</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">exemplo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nome); <span class=\"comment\">// &quot;João&quot; será impresso no console</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">exemplo</span>();</span><br></pre></td></tr></table></figure>\n\n<p>Variáveis e constantes declaradas dentro de uma função têm escopo local, o que significa que elas só podem ser acessadas dentro dessa função.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">exemplo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> nome = <span class=\"string\">&quot;João&quot;</span>; <span class=\"comment\">// variável local</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nome); <span class=\"comment\">// &quot;João&quot; será impresso no console</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">exemplo</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nome); <span class=\"comment\">// erro, a variável nome não pode ser acessada fora da função exemplo</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Conclusao\"><a href=\"#Conclusao\" class=\"headerlink\" title=\"Conclusão\"></a>Conclusão</h3><p>As variáveis e constantes são ferramentas essenciais para o desenvolvimento em JavaScript. Elas permitem que os desenvolvedores armazenem valores e referências a valores em seus códigos, além de ajudar a manter a organização e a legibilidade do código. É importante entender a diferença entre variáveis e constantes, bem como o escopo em que elas são definidas, para evitar erros e maximizar a eficiência do código.</p>\n"},{"title":"Operadores Javascript","date":"2023-04-28T18:40:03.000Z","author":"Osvaldo Souza","_content":"\nOs operadores em JavaScript são símbolos que indicam ao interpretador do JavaScript para executar operações em um ou mais valores. Os operadores são amplamente utilizados em programação para realizar cálculos matemáticos, comparações e outras tarefas.\n\nExistem vários tipos de operadores em JavaScript, incluindo operadores aritméticos, operadores de atribuição, operadores de comparação, operadores lógicos, operadores bit a bit e operadores ternários. Neste artigo, vamos examinar cada um desses tipos de operadores e ver como eles são usados em JavaScript.\n\n### Operadores Aritméticos\nOs operadores aritméticos em JavaScript são usados para realizar operações matemáticas básicas, como adição, subtração, multiplicação e divisão. Aqui estão os operadores aritméticos mais comuns em JavaScript:\n\n\\+ (Adição): Este operador é usado para adicionar dois valores.\n\\- (Subtração): Este operador é usado para subtrair um valor de outro valor.\n\\* (Multiplicação): Este operador é usado para multiplicar dois valores.\n/ (Divisão): Este operador é usado para dividir um valor por outro valor.\n% (Módulo): Este operador é usado para encontrar o resto da divisão entre dois valores.\n++ (Incremento): Este operador é usado para aumentar um valor em 1.\n-- (Decremento): Este operador é usado para diminuir um valor em 1.\n\nExemplo de uso:\n\n```javascript\n\nlet x = 5;\nlet y = 10;\n\nlet soma = x + y; // soma será igual a 15\nlet subtracao = y - x; // subtracao será igual a 5\nlet multiplicacao = x * y; // multiplicacao será igual a 50\nlet divisao = y / x; // divisao será igual a 2\nlet resto = y % x; // resto será igual a 0\nlet incremento = ++x; // x será igual a 6\nlet decremento = --y; // y será igual a 9\n```\n\n### Operadores de Atribuição\nOs operadores de atribuição em JavaScript são usados para atribuir um valor a uma variável. Aqui estão os operadores de atribuição mais comuns em JavaScript:\n\n= (Atribuição): Este operador é usado para atribuir um valor a uma variável.\n+= (Atribuição de Adição): Este operador é usado para adicionar um valor a uma variável e atribuir o resultado à mesma variável.\n-= (Atribuição de Subtração): Este operador é usado para subtrair um valor de uma variável e atribuir o resultado à mesma variável.\n*= (Atribuição de Multiplicação): Este operador é usado para multiplicar uma variável por um valor e atribuir o resultado à mesma variável.\n/= (Atribuição de Divisão): Este operador é usado para dividir uma variável por um valor e atribuir o resultado à mesma variável.\n\nExemplo de uso:\n\n```javascript\n\nlet x = 5;\nx += 10; // x será igual a 15\nx -= 3; // x será igual a 12\nx *= 2; // x será igual a 24\nx /= 4; // x será igual a 6\n```\n\n### Operadores de Comparação\nOs operadores de comparação em JavaScript são usados para comparar dois valores e retornar um valor booleano (true ou false) indicando se a comparação é verdadeira ou falsa. Aqui estão os operadores de comparação mais comuns em JavaScript:\n\n== (Igual): Este operador compara se dois valores são iguais.\n!= (Diferente): Este operador compara se dois valores são diferentes.\n=== (Estritamente Igual): Este operador compara se dois valores são iguais e do mesmo tipo de dados.\n!== (Estritamente Diferente): Este operador compara se dois valores são diferentes ou de tipos diferentes.\n\n(Maior que): Este operador compara se um valor é maior que outro valor.\n\n< (Menor que): Este operador compara se um valor é menor que outro valor.\n\n= (Maior ou Igual): Este operador compara se um valor é maior ou igual a outro valor.\n\n<= (Menor ou Igual): Este operador compara se um valor é menor ou igual a outro valor.\n\nExemplo de uso:\n\n```javascript\n\nlet x = 5;\nlet y = 10;\n\nconsole.log(x == 5); // retorna true\nconsole.log(x != y); // retorna true\nconsole.log(x === '5'); // retorna false\nconsole.log(x !== '5'); // retorna true\nconsole.log(y > x); // retorna true\nconsole.log(x < y); // retorna true\nconsole.log(y >= 10); // retorna true\nconsole.log(x <= 4); // retorna false\n```\n\n### Operadores Lógicos\nOs operadores lógicos em JavaScript são usados para combinar duas ou mais expressões lógicas e retornar um valor booleano (true ou false). Aqui estão os operadores lógicos mais comuns em JavaScript:\n\n&& (E): Este operador retorna true se todas as expressões lógicas forem verdadeiras.\n|| (Ou): Este operador retorna true se pelo menos uma das expressões lógicas for verdadeira.\n! (Não): Este operador inverte o valor da expressão lógica.\n\nExemplo de uso:\n\n```javascript\n\nlet x = 5;\nlet y = 10;\n\nconsole.log(x > 3 && y < 15); // retorna true\nconsole.log(x > 10 || y < 5); // retorna false\nconsole.log(!(x == y)); // retorna true\n```\n### Operadores Bit a Bit\nOs operadores bit a bit em JavaScript são usados para manipular valores binários (zeros e uns) em nível de bit. Eles são usados principalmente para operações de baixo nível, como criptografia, compactação de dados e manipulação de imagens. Aqui estão os operadores bit a bit mais comuns em JavaScript:\n\n& (E): Este operador realiza uma operação de E bit a bit em dois valores.\n| (Ou): Este operador realiza uma operação de OU bit a bit em dois valores.\n~ (Não): Este operador inverte todos os bits de um valor.\n^ (XOR): Este operador realiza uma operação de OU exclusivo bit a bit em dois valores.\n<< (Deslocamento à Esquerda): Este operador move os bits de um valor para a esquerda.\n\n(Deslocamento à Direita): Este operador move os bits de um valor para a direita.\n\nExemplo de uso:\n\n```javascript\n\nlet x = 5;\nlet y = 10;\n\nconsole.log(x & y); // retorna 0\nconsole.log(x | y); // retorna 15\nconsole.log(~x); // retorna -6\nconsole.log(x ^ y); // retorna 15\nconsole.log(x << 1); // retorna 10\nconsole.log(y >> 1); // retorna 5\n```\n\n### Operadores de Atribuição\nOs operadores de atribuição em JavaScript são usados para atribuir um valor a uma variável. Aqui estão os operadores de atribuição mais comuns em JavaScript:\n\n= (Atribuição): Este operador atribui um valor a uma variável.\n+= (Atribuição de Adição): Este operador adiciona um valor a uma variável.\n-= (Atribuição de Subtração): Este operador subtrai um valor de uma variável.\n*= (Atribuição de Multiplicação): Este operador multiplica um valor por uma variável.\n/= (Atribuição de Divisão): Este operador divide um valor por uma variável.\n%= (Atribuição de Módulo): Este operador atribui o resto de uma divisão a uma variável.\n<<= (Atribuição de Deslocamento à Esquerda): Este operador move os bits de um valor para a esquerda e atribui o resultado a uma variável.\n\\>>= (Atribuição de Deslocamento à Direita): Este operador move os bits de um valor para a direita e atribui o resultado a uma variável.\n&= (Atribuição de E Bit a Bit): Este operador realiza uma operação de E bit a bit e atribui o resultado a uma variável.\n|= (Atribuição de OU Bit a Bit): Este operador realiza uma operação de OU bit a bit e atribui o resultado a uma variável.\n^= (Atribuição de OU Exclusivo Bit a Bit): Este operador realiza uma operação de OU exclusivo bit a bit e atribui o resultado a uma variável.\n\nExemplo de uso:\n\n```javascript\nlet x = 5;\nlet y = 10;\n\nx += y; // x agora é igual a 15\ny *= 2; // y agora é igual a 20\nx %= 6; // x agora é igual a 3\ny <<= 2; // y agora é igual a 80\n```\n\n\n### Conclusão\nOs operadores em JavaScript são fundamentais para realizar operações matemáticas, comparações, combinações lógicas e manipulação de bits. É importante entender como esses operadores funcionam e como eles podem ser usados em diferentes situações. Com a prática e o estudo contínuo, é possível se tornar um programador mais eficiente e habilidoso em JavaScript.\n","source":"_posts/Operadores-Javascript.md","raw":"---\ntitle: Operadores Javascript\ndate: 2023-04-28 15:40:03\nauthor: Osvaldo Souza\ntags:\ncategory: javascript\n---\n\nOs operadores em JavaScript são símbolos que indicam ao interpretador do JavaScript para executar operações em um ou mais valores. Os operadores são amplamente utilizados em programação para realizar cálculos matemáticos, comparações e outras tarefas.\n\nExistem vários tipos de operadores em JavaScript, incluindo operadores aritméticos, operadores de atribuição, operadores de comparação, operadores lógicos, operadores bit a bit e operadores ternários. Neste artigo, vamos examinar cada um desses tipos de operadores e ver como eles são usados em JavaScript.\n\n### Operadores Aritméticos\nOs operadores aritméticos em JavaScript são usados para realizar operações matemáticas básicas, como adição, subtração, multiplicação e divisão. Aqui estão os operadores aritméticos mais comuns em JavaScript:\n\n\\+ (Adição): Este operador é usado para adicionar dois valores.\n\\- (Subtração): Este operador é usado para subtrair um valor de outro valor.\n\\* (Multiplicação): Este operador é usado para multiplicar dois valores.\n/ (Divisão): Este operador é usado para dividir um valor por outro valor.\n% (Módulo): Este operador é usado para encontrar o resto da divisão entre dois valores.\n++ (Incremento): Este operador é usado para aumentar um valor em 1.\n-- (Decremento): Este operador é usado para diminuir um valor em 1.\n\nExemplo de uso:\n\n```javascript\n\nlet x = 5;\nlet y = 10;\n\nlet soma = x + y; // soma será igual a 15\nlet subtracao = y - x; // subtracao será igual a 5\nlet multiplicacao = x * y; // multiplicacao será igual a 50\nlet divisao = y / x; // divisao será igual a 2\nlet resto = y % x; // resto será igual a 0\nlet incremento = ++x; // x será igual a 6\nlet decremento = --y; // y será igual a 9\n```\n\n### Operadores de Atribuição\nOs operadores de atribuição em JavaScript são usados para atribuir um valor a uma variável. Aqui estão os operadores de atribuição mais comuns em JavaScript:\n\n= (Atribuição): Este operador é usado para atribuir um valor a uma variável.\n+= (Atribuição de Adição): Este operador é usado para adicionar um valor a uma variável e atribuir o resultado à mesma variável.\n-= (Atribuição de Subtração): Este operador é usado para subtrair um valor de uma variável e atribuir o resultado à mesma variável.\n*= (Atribuição de Multiplicação): Este operador é usado para multiplicar uma variável por um valor e atribuir o resultado à mesma variável.\n/= (Atribuição de Divisão): Este operador é usado para dividir uma variável por um valor e atribuir o resultado à mesma variável.\n\nExemplo de uso:\n\n```javascript\n\nlet x = 5;\nx += 10; // x será igual a 15\nx -= 3; // x será igual a 12\nx *= 2; // x será igual a 24\nx /= 4; // x será igual a 6\n```\n\n### Operadores de Comparação\nOs operadores de comparação em JavaScript são usados para comparar dois valores e retornar um valor booleano (true ou false) indicando se a comparação é verdadeira ou falsa. Aqui estão os operadores de comparação mais comuns em JavaScript:\n\n== (Igual): Este operador compara se dois valores são iguais.\n!= (Diferente): Este operador compara se dois valores são diferentes.\n=== (Estritamente Igual): Este operador compara se dois valores são iguais e do mesmo tipo de dados.\n!== (Estritamente Diferente): Este operador compara se dois valores são diferentes ou de tipos diferentes.\n\n(Maior que): Este operador compara se um valor é maior que outro valor.\n\n< (Menor que): Este operador compara se um valor é menor que outro valor.\n\n= (Maior ou Igual): Este operador compara se um valor é maior ou igual a outro valor.\n\n<= (Menor ou Igual): Este operador compara se um valor é menor ou igual a outro valor.\n\nExemplo de uso:\n\n```javascript\n\nlet x = 5;\nlet y = 10;\n\nconsole.log(x == 5); // retorna true\nconsole.log(x != y); // retorna true\nconsole.log(x === '5'); // retorna false\nconsole.log(x !== '5'); // retorna true\nconsole.log(y > x); // retorna true\nconsole.log(x < y); // retorna true\nconsole.log(y >= 10); // retorna true\nconsole.log(x <= 4); // retorna false\n```\n\n### Operadores Lógicos\nOs operadores lógicos em JavaScript são usados para combinar duas ou mais expressões lógicas e retornar um valor booleano (true ou false). Aqui estão os operadores lógicos mais comuns em JavaScript:\n\n&& (E): Este operador retorna true se todas as expressões lógicas forem verdadeiras.\n|| (Ou): Este operador retorna true se pelo menos uma das expressões lógicas for verdadeira.\n! (Não): Este operador inverte o valor da expressão lógica.\n\nExemplo de uso:\n\n```javascript\n\nlet x = 5;\nlet y = 10;\n\nconsole.log(x > 3 && y < 15); // retorna true\nconsole.log(x > 10 || y < 5); // retorna false\nconsole.log(!(x == y)); // retorna true\n```\n### Operadores Bit a Bit\nOs operadores bit a bit em JavaScript são usados para manipular valores binários (zeros e uns) em nível de bit. Eles são usados principalmente para operações de baixo nível, como criptografia, compactação de dados e manipulação de imagens. Aqui estão os operadores bit a bit mais comuns em JavaScript:\n\n& (E): Este operador realiza uma operação de E bit a bit em dois valores.\n| (Ou): Este operador realiza uma operação de OU bit a bit em dois valores.\n~ (Não): Este operador inverte todos os bits de um valor.\n^ (XOR): Este operador realiza uma operação de OU exclusivo bit a bit em dois valores.\n<< (Deslocamento à Esquerda): Este operador move os bits de um valor para a esquerda.\n\n(Deslocamento à Direita): Este operador move os bits de um valor para a direita.\n\nExemplo de uso:\n\n```javascript\n\nlet x = 5;\nlet y = 10;\n\nconsole.log(x & y); // retorna 0\nconsole.log(x | y); // retorna 15\nconsole.log(~x); // retorna -6\nconsole.log(x ^ y); // retorna 15\nconsole.log(x << 1); // retorna 10\nconsole.log(y >> 1); // retorna 5\n```\n\n### Operadores de Atribuição\nOs operadores de atribuição em JavaScript são usados para atribuir um valor a uma variável. Aqui estão os operadores de atribuição mais comuns em JavaScript:\n\n= (Atribuição): Este operador atribui um valor a uma variável.\n+= (Atribuição de Adição): Este operador adiciona um valor a uma variável.\n-= (Atribuição de Subtração): Este operador subtrai um valor de uma variável.\n*= (Atribuição de Multiplicação): Este operador multiplica um valor por uma variável.\n/= (Atribuição de Divisão): Este operador divide um valor por uma variável.\n%= (Atribuição de Módulo): Este operador atribui o resto de uma divisão a uma variável.\n<<= (Atribuição de Deslocamento à Esquerda): Este operador move os bits de um valor para a esquerda e atribui o resultado a uma variável.\n\\>>= (Atribuição de Deslocamento à Direita): Este operador move os bits de um valor para a direita e atribui o resultado a uma variável.\n&= (Atribuição de E Bit a Bit): Este operador realiza uma operação de E bit a bit e atribui o resultado a uma variável.\n|= (Atribuição de OU Bit a Bit): Este operador realiza uma operação de OU bit a bit e atribui o resultado a uma variável.\n^= (Atribuição de OU Exclusivo Bit a Bit): Este operador realiza uma operação de OU exclusivo bit a bit e atribui o resultado a uma variável.\n\nExemplo de uso:\n\n```javascript\nlet x = 5;\nlet y = 10;\n\nx += y; // x agora é igual a 15\ny *= 2; // y agora é igual a 20\nx %= 6; // x agora é igual a 3\ny <<= 2; // y agora é igual a 80\n```\n\n\n### Conclusão\nOs operadores em JavaScript são fundamentais para realizar operações matemáticas, comparações, combinações lógicas e manipulação de bits. É importante entender como esses operadores funcionam e como eles podem ser usados em diferentes situações. Com a prática e o estudo contínuo, é possível se tornar um programador mais eficiente e habilidoso em JavaScript.\n","slug":"Operadores-Javascript","published":1,"updated":"2023-04-28T18:57:12.000Z","_id":"clh0whkw600001kzy6a4j0s0f","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Os operadores em JavaScript são símbolos que indicam ao interpretador do JavaScript para executar operações em um ou mais valores. Os operadores são amplamente utilizados em programação para realizar cálculos matemáticos, comparações e outras tarefas.</p>\n<p>Existem vários tipos de operadores em JavaScript, incluindo operadores aritméticos, operadores de atribuição, operadores de comparação, operadores lógicos, operadores bit a bit e operadores ternários. Neste artigo, vamos examinar cada um desses tipos de operadores e ver como eles são usados em JavaScript.</p>\n<h3 id=\"Operadores-Aritmeticos\"><a href=\"#Operadores-Aritmeticos\" class=\"headerlink\" title=\"Operadores Aritméticos\"></a>Operadores Aritméticos</h3><p>Os operadores aritméticos em JavaScript são usados para realizar operações matemáticas básicas, como adição, subtração, multiplicação e divisão. Aqui estão os operadores aritméticos mais comuns em JavaScript:</p>\n<p>+ (Adição): Este operador é usado para adicionar dois valores.<br>- (Subtração): Este operador é usado para subtrair um valor de outro valor.<br>* (Multiplicação): Este operador é usado para multiplicar dois valores.<br>&#x2F; (Divisão): Este operador é usado para dividir um valor por outro valor.<br>% (Módulo): Este operador é usado para encontrar o resto da divisão entre dois valores.<br>++ (Incremento): Este operador é usado para aumentar um valor em 1.<br>– (Decremento): Este operador é usado para diminuir um valor em 1.</p>\n<p>Exemplo de uso:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> soma = x + y; <span class=\"comment\">// soma será igual a 15</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> subtracao = y - x; <span class=\"comment\">// subtracao será igual a 5</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> multiplicacao = x * y; <span class=\"comment\">// multiplicacao será igual a 50</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> divisao = y / x; <span class=\"comment\">// divisao será igual a 2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> resto = y % x; <span class=\"comment\">// resto será igual a 0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> incremento = ++x; <span class=\"comment\">// x será igual a 6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> decremento = --y; <span class=\"comment\">// y será igual a 9</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Operadores-de-Atribuicao\"><a href=\"#Operadores-de-Atribuicao\" class=\"headerlink\" title=\"Operadores de Atribuição\"></a>Operadores de Atribuição</h3><p>Os operadores de atribuição em JavaScript são usados para atribuir um valor a uma variável. Aqui estão os operadores de atribuição mais comuns em JavaScript:</p>\n<p>&#x3D; (Atribuição): Este operador é usado para atribuir um valor a uma variável.<br>+&#x3D; (Atribuição de Adição): Este operador é usado para adicionar um valor a uma variável e atribuir o resultado à mesma variável.<br>-&#x3D; (Atribuição de Subtração): Este operador é usado para subtrair um valor de uma variável e atribuir o resultado à mesma variável.<br>*&#x3D; (Atribuição de Multiplicação): Este operador é usado para multiplicar uma variável por um valor e atribuir o resultado à mesma variável.<br>&#x2F;&#x3D; (Atribuição de Divisão): Este operador é usado para dividir uma variável por um valor e atribuir o resultado à mesma variável.</p>\n<p>Exemplo de uso:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\">x += <span class=\"number\">10</span>; <span class=\"comment\">// x será igual a 15</span></span><br><span class=\"line\">x -= <span class=\"number\">3</span>; <span class=\"comment\">// x será igual a 12</span></span><br><span class=\"line\">x *= <span class=\"number\">2</span>; <span class=\"comment\">// x será igual a 24</span></span><br><span class=\"line\">x /= <span class=\"number\">4</span>; <span class=\"comment\">// x será igual a 6</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Operadores-de-Comparacao\"><a href=\"#Operadores-de-Comparacao\" class=\"headerlink\" title=\"Operadores de Comparação\"></a>Operadores de Comparação</h3><p>Os operadores de comparação em JavaScript são usados para comparar dois valores e retornar um valor booleano (true ou false) indicando se a comparação é verdadeira ou falsa. Aqui estão os operadores de comparação mais comuns em JavaScript:</p>\n<p>&#x3D;&#x3D; (Igual): Este operador compara se dois valores são iguais.<br>!&#x3D; (Diferente): Este operador compara se dois valores são diferentes.<br>&#x3D;&#x3D;&#x3D; (Estritamente Igual): Este operador compara se dois valores são iguais e do mesmo tipo de dados.<br>!&#x3D;&#x3D; (Estritamente Diferente): Este operador compara se dois valores são diferentes ou de tipos diferentes.</p>\n<p>(Maior que): Este operador compara se um valor é maior que outro valor.</p>\n<p>&lt; (Menor que): Este operador compara se um valor é menor que outro valor.</p>\n<p>&#x3D; (Maior ou Igual): Este operador compara se um valor é maior ou igual a outro valor.</p>\n<p>&lt;&#x3D; (Menor ou Igual): Este operador compara se um valor é menor ou igual a outro valor.</p>\n<p>Exemplo de uso:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x == <span class=\"number\">5</span>); <span class=\"comment\">// retorna true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x != y); <span class=\"comment\">// retorna true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x === <span class=\"string\">&#x27;5&#x27;</span>); <span class=\"comment\">// retorna false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x !== <span class=\"string\">&#x27;5&#x27;</span>); <span class=\"comment\">// retorna true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(y &gt; x); <span class=\"comment\">// retorna true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x &lt; y); <span class=\"comment\">// retorna true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(y &gt;= <span class=\"number\">10</span>); <span class=\"comment\">// retorna true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x &lt;= <span class=\"number\">4</span>); <span class=\"comment\">// retorna false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Operadores-Logicos\"><a href=\"#Operadores-Logicos\" class=\"headerlink\" title=\"Operadores Lógicos\"></a>Operadores Lógicos</h3><p>Os operadores lógicos em JavaScript são usados para combinar duas ou mais expressões lógicas e retornar um valor booleano (true ou false). Aqui estão os operadores lógicos mais comuns em JavaScript:</p>\n<p>&amp;&amp; (E): Este operador retorna true se todas as expressões lógicas forem verdadeiras.<br>|| (Ou): Este operador retorna true se pelo menos uma das expressões lógicas for verdadeira.<br>! (Não): Este operador inverte o valor da expressão lógica.</p>\n<p>Exemplo de uso:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x &gt; <span class=\"number\">3</span> &amp;&amp; y &lt; <span class=\"number\">15</span>); <span class=\"comment\">// retorna true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x &gt; <span class=\"number\">10</span> || y &lt; <span class=\"number\">5</span>); <span class=\"comment\">// retorna false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(!(x == y)); <span class=\"comment\">// retorna true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Operadores-Bit-a-Bit\"><a href=\"#Operadores-Bit-a-Bit\" class=\"headerlink\" title=\"Operadores Bit a Bit\"></a>Operadores Bit a Bit</h3><p>Os operadores bit a bit em JavaScript são usados para manipular valores binários (zeros e uns) em nível de bit. Eles são usados principalmente para operações de baixo nível, como criptografia, compactação de dados e manipulação de imagens. Aqui estão os operadores bit a bit mais comuns em JavaScript:</p>\n<p>&amp; (E): Este operador realiza uma operação de E bit a bit em dois valores.<br>| (Ou): Este operador realiza uma operação de OU bit a bit em dois valores.<br>~ (Não): Este operador inverte todos os bits de um valor.<br>^ (XOR): Este operador realiza uma operação de OU exclusivo bit a bit em dois valores.<br>&lt;&lt; (Deslocamento à Esquerda): Este operador move os bits de um valor para a esquerda.</p>\n<p>(Deslocamento à Direita): Este operador move os bits de um valor para a direita.</p>\n<p>Exemplo de uso:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x &amp; y); <span class=\"comment\">// retorna 0</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x | y); <span class=\"comment\">// retorna 15</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(~x); <span class=\"comment\">// retorna -6</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x ^ y); <span class=\"comment\">// retorna 15</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x &lt;&lt; <span class=\"number\">1</span>); <span class=\"comment\">// retorna 10</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(y &gt;&gt; <span class=\"number\">1</span>); <span class=\"comment\">// retorna 5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Operadores-de-Atribuicao-1\"><a href=\"#Operadores-de-Atribuicao-1\" class=\"headerlink\" title=\"Operadores de Atribuição\"></a>Operadores de Atribuição</h3><p>Os operadores de atribuição em JavaScript são usados para atribuir um valor a uma variável. Aqui estão os operadores de atribuição mais comuns em JavaScript:</p>\n<p>&#x3D; (Atribuição): Este operador atribui um valor a uma variável.<br>+&#x3D; (Atribuição de Adição): Este operador adiciona um valor a uma variável.<br>-&#x3D; (Atribuição de Subtração): Este operador subtrai um valor de uma variável.<br>*&#x3D; (Atribuição de Multiplicação): Este operador multiplica um valor por uma variável.<br>&#x2F;&#x3D; (Atribuição de Divisão): Este operador divide um valor por uma variável.<br>%&#x3D; (Atribuição de Módulo): Este operador atribui o resto de uma divisão a uma variável.<br>&lt;&lt;&#x3D; (Atribuição de Deslocamento à Esquerda): Este operador move os bits de um valor para a esquerda e atribui o resultado a uma variável.<br>&gt;&gt;&#x3D; (Atribuição de Deslocamento à Direita): Este operador move os bits de um valor para a direita e atribui o resultado a uma variável.<br>&amp;&#x3D; (Atribuição de E Bit a Bit): Este operador realiza uma operação de E bit a bit e atribui o resultado a uma variável.<br>|&#x3D; (Atribuição de OU Bit a Bit): Este operador realiza uma operação de OU bit a bit e atribui o resultado a uma variável.<br>^&#x3D; (Atribuição de OU Exclusivo Bit a Bit): Este operador realiza uma operação de OU exclusivo bit a bit e atribui o resultado a uma variável.</p>\n<p>Exemplo de uso:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">x += y; <span class=\"comment\">// x agora é igual a 15</span></span><br><span class=\"line\">y *= <span class=\"number\">2</span>; <span class=\"comment\">// y agora é igual a 20</span></span><br><span class=\"line\">x %= <span class=\"number\">6</span>; <span class=\"comment\">// x agora é igual a 3</span></span><br><span class=\"line\">y &lt;&lt;= <span class=\"number\">2</span>; <span class=\"comment\">// y agora é igual a 80</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Conclusao\"><a href=\"#Conclusao\" class=\"headerlink\" title=\"Conclusão\"></a>Conclusão</h3><p>Os operadores em JavaScript são fundamentais para realizar operações matemáticas, comparações, combinações lógicas e manipulação de bits. É importante entender como esses operadores funcionam e como eles podem ser usados em diferentes situações. Com a prática e o estudo contínuo, é possível se tornar um programador mais eficiente e habilidoso em JavaScript.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Os operadores em JavaScript são símbolos que indicam ao interpretador do JavaScript para executar operações em um ou mais valores. Os operadores são amplamente utilizados em programação para realizar cálculos matemáticos, comparações e outras tarefas.</p>\n<p>Existem vários tipos de operadores em JavaScript, incluindo operadores aritméticos, operadores de atribuição, operadores de comparação, operadores lógicos, operadores bit a bit e operadores ternários. Neste artigo, vamos examinar cada um desses tipos de operadores e ver como eles são usados em JavaScript.</p>\n<h3 id=\"Operadores-Aritmeticos\"><a href=\"#Operadores-Aritmeticos\" class=\"headerlink\" title=\"Operadores Aritméticos\"></a>Operadores Aritméticos</h3><p>Os operadores aritméticos em JavaScript são usados para realizar operações matemáticas básicas, como adição, subtração, multiplicação e divisão. Aqui estão os operadores aritméticos mais comuns em JavaScript:</p>\n<p>+ (Adição): Este operador é usado para adicionar dois valores.<br>- (Subtração): Este operador é usado para subtrair um valor de outro valor.<br>* (Multiplicação): Este operador é usado para multiplicar dois valores.<br>&#x2F; (Divisão): Este operador é usado para dividir um valor por outro valor.<br>% (Módulo): Este operador é usado para encontrar o resto da divisão entre dois valores.<br>++ (Incremento): Este operador é usado para aumentar um valor em 1.<br>– (Decremento): Este operador é usado para diminuir um valor em 1.</p>\n<p>Exemplo de uso:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> soma = x + y; <span class=\"comment\">// soma será igual a 15</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> subtracao = y - x; <span class=\"comment\">// subtracao será igual a 5</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> multiplicacao = x * y; <span class=\"comment\">// multiplicacao será igual a 50</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> divisao = y / x; <span class=\"comment\">// divisao será igual a 2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> resto = y % x; <span class=\"comment\">// resto será igual a 0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> incremento = ++x; <span class=\"comment\">// x será igual a 6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> decremento = --y; <span class=\"comment\">// y será igual a 9</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Operadores-de-Atribuicao\"><a href=\"#Operadores-de-Atribuicao\" class=\"headerlink\" title=\"Operadores de Atribuição\"></a>Operadores de Atribuição</h3><p>Os operadores de atribuição em JavaScript são usados para atribuir um valor a uma variável. Aqui estão os operadores de atribuição mais comuns em JavaScript:</p>\n<p>&#x3D; (Atribuição): Este operador é usado para atribuir um valor a uma variável.<br>+&#x3D; (Atribuição de Adição): Este operador é usado para adicionar um valor a uma variável e atribuir o resultado à mesma variável.<br>-&#x3D; (Atribuição de Subtração): Este operador é usado para subtrair um valor de uma variável e atribuir o resultado à mesma variável.<br>*&#x3D; (Atribuição de Multiplicação): Este operador é usado para multiplicar uma variável por um valor e atribuir o resultado à mesma variável.<br>&#x2F;&#x3D; (Atribuição de Divisão): Este operador é usado para dividir uma variável por um valor e atribuir o resultado à mesma variável.</p>\n<p>Exemplo de uso:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\">x += <span class=\"number\">10</span>; <span class=\"comment\">// x será igual a 15</span></span><br><span class=\"line\">x -= <span class=\"number\">3</span>; <span class=\"comment\">// x será igual a 12</span></span><br><span class=\"line\">x *= <span class=\"number\">2</span>; <span class=\"comment\">// x será igual a 24</span></span><br><span class=\"line\">x /= <span class=\"number\">4</span>; <span class=\"comment\">// x será igual a 6</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Operadores-de-Comparacao\"><a href=\"#Operadores-de-Comparacao\" class=\"headerlink\" title=\"Operadores de Comparação\"></a>Operadores de Comparação</h3><p>Os operadores de comparação em JavaScript são usados para comparar dois valores e retornar um valor booleano (true ou false) indicando se a comparação é verdadeira ou falsa. Aqui estão os operadores de comparação mais comuns em JavaScript:</p>\n<p>&#x3D;&#x3D; (Igual): Este operador compara se dois valores são iguais.<br>!&#x3D; (Diferente): Este operador compara se dois valores são diferentes.<br>&#x3D;&#x3D;&#x3D; (Estritamente Igual): Este operador compara se dois valores são iguais e do mesmo tipo de dados.<br>!&#x3D;&#x3D; (Estritamente Diferente): Este operador compara se dois valores são diferentes ou de tipos diferentes.</p>\n<p>(Maior que): Este operador compara se um valor é maior que outro valor.</p>\n<p>&lt; (Menor que): Este operador compara se um valor é menor que outro valor.</p>\n<p>&#x3D; (Maior ou Igual): Este operador compara se um valor é maior ou igual a outro valor.</p>\n<p>&lt;&#x3D; (Menor ou Igual): Este operador compara se um valor é menor ou igual a outro valor.</p>\n<p>Exemplo de uso:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x == <span class=\"number\">5</span>); <span class=\"comment\">// retorna true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x != y); <span class=\"comment\">// retorna true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x === <span class=\"string\">&#x27;5&#x27;</span>); <span class=\"comment\">// retorna false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x !== <span class=\"string\">&#x27;5&#x27;</span>); <span class=\"comment\">// retorna true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(y &gt; x); <span class=\"comment\">// retorna true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x &lt; y); <span class=\"comment\">// retorna true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(y &gt;= <span class=\"number\">10</span>); <span class=\"comment\">// retorna true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x &lt;= <span class=\"number\">4</span>); <span class=\"comment\">// retorna false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Operadores-Logicos\"><a href=\"#Operadores-Logicos\" class=\"headerlink\" title=\"Operadores Lógicos\"></a>Operadores Lógicos</h3><p>Os operadores lógicos em JavaScript são usados para combinar duas ou mais expressões lógicas e retornar um valor booleano (true ou false). Aqui estão os operadores lógicos mais comuns em JavaScript:</p>\n<p>&amp;&amp; (E): Este operador retorna true se todas as expressões lógicas forem verdadeiras.<br>|| (Ou): Este operador retorna true se pelo menos uma das expressões lógicas for verdadeira.<br>! (Não): Este operador inverte o valor da expressão lógica.</p>\n<p>Exemplo de uso:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x &gt; <span class=\"number\">3</span> &amp;&amp; y &lt; <span class=\"number\">15</span>); <span class=\"comment\">// retorna true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x &gt; <span class=\"number\">10</span> || y &lt; <span class=\"number\">5</span>); <span class=\"comment\">// retorna false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(!(x == y)); <span class=\"comment\">// retorna true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Operadores-Bit-a-Bit\"><a href=\"#Operadores-Bit-a-Bit\" class=\"headerlink\" title=\"Operadores Bit a Bit\"></a>Operadores Bit a Bit</h3><p>Os operadores bit a bit em JavaScript são usados para manipular valores binários (zeros e uns) em nível de bit. Eles são usados principalmente para operações de baixo nível, como criptografia, compactação de dados e manipulação de imagens. Aqui estão os operadores bit a bit mais comuns em JavaScript:</p>\n<p>&amp; (E): Este operador realiza uma operação de E bit a bit em dois valores.<br>| (Ou): Este operador realiza uma operação de OU bit a bit em dois valores.<br>~ (Não): Este operador inverte todos os bits de um valor.<br>^ (XOR): Este operador realiza uma operação de OU exclusivo bit a bit em dois valores.<br>&lt;&lt; (Deslocamento à Esquerda): Este operador move os bits de um valor para a esquerda.</p>\n<p>(Deslocamento à Direita): Este operador move os bits de um valor para a direita.</p>\n<p>Exemplo de uso:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x &amp; y); <span class=\"comment\">// retorna 0</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x | y); <span class=\"comment\">// retorna 15</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(~x); <span class=\"comment\">// retorna -6</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x ^ y); <span class=\"comment\">// retorna 15</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x &lt;&lt; <span class=\"number\">1</span>); <span class=\"comment\">// retorna 10</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(y &gt;&gt; <span class=\"number\">1</span>); <span class=\"comment\">// retorna 5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Operadores-de-Atribuicao-1\"><a href=\"#Operadores-de-Atribuicao-1\" class=\"headerlink\" title=\"Operadores de Atribuição\"></a>Operadores de Atribuição</h3><p>Os operadores de atribuição em JavaScript são usados para atribuir um valor a uma variável. Aqui estão os operadores de atribuição mais comuns em JavaScript:</p>\n<p>&#x3D; (Atribuição): Este operador atribui um valor a uma variável.<br>+&#x3D; (Atribuição de Adição): Este operador adiciona um valor a uma variável.<br>-&#x3D; (Atribuição de Subtração): Este operador subtrai um valor de uma variável.<br>*&#x3D; (Atribuição de Multiplicação): Este operador multiplica um valor por uma variável.<br>&#x2F;&#x3D; (Atribuição de Divisão): Este operador divide um valor por uma variável.<br>%&#x3D; (Atribuição de Módulo): Este operador atribui o resto de uma divisão a uma variável.<br>&lt;&lt;&#x3D; (Atribuição de Deslocamento à Esquerda): Este operador move os bits de um valor para a esquerda e atribui o resultado a uma variável.<br>&gt;&gt;&#x3D; (Atribuição de Deslocamento à Direita): Este operador move os bits de um valor para a direita e atribui o resultado a uma variável.<br>&amp;&#x3D; (Atribuição de E Bit a Bit): Este operador realiza uma operação de E bit a bit e atribui o resultado a uma variável.<br>|&#x3D; (Atribuição de OU Bit a Bit): Este operador realiza uma operação de OU bit a bit e atribui o resultado a uma variável.<br>^&#x3D; (Atribuição de OU Exclusivo Bit a Bit): Este operador realiza uma operação de OU exclusivo bit a bit e atribui o resultado a uma variável.</p>\n<p>Exemplo de uso:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">x += y; <span class=\"comment\">// x agora é igual a 15</span></span><br><span class=\"line\">y *= <span class=\"number\">2</span>; <span class=\"comment\">// y agora é igual a 20</span></span><br><span class=\"line\">x %= <span class=\"number\">6</span>; <span class=\"comment\">// x agora é igual a 3</span></span><br><span class=\"line\">y &lt;&lt;= <span class=\"number\">2</span>; <span class=\"comment\">// y agora é igual a 80</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Conclusao\"><a href=\"#Conclusao\" class=\"headerlink\" title=\"Conclusão\"></a>Conclusão</h3><p>Os operadores em JavaScript são fundamentais para realizar operações matemáticas, comparações, combinações lógicas e manipulação de bits. É importante entender como esses operadores funcionam e como eles podem ser usados em diferentes situações. Com a prática e o estudo contínuo, é possível se tornar um programador mais eficiente e habilidoso em JavaScript.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clgz6615p0000ivzy9zfc2g0e","category_id":"clh0ri2ns0002u6zyg8vd8k93","_id":"clh0ri2nu0003u6zy4n848mtj"},{"post_id":"clgzcjny50000lxzy48j7eyzj","category_id":"clh0rj3pa0004u6zy34kwcyh2","_id":"clh0rj3pb0005u6zy635ieab5"},{"post_id":"clh0whkw600001kzy6a4j0s0f","category_id":"clh0rj3pa0004u6zy34kwcyh2","_id":"clh4t719d0000zuy6drhr5b1d"}],"PostTag":[{"post_id":"clgz6615p0000ivzy9zfc2g0e","tag_id":"clh0rhm1p0000u6zy5uos9ci1","_id":"clh0rhmbf0001u6zy1iby5f8p"}],"Tag":[{"name":"welcome","_id":"clh0rhm1p0000u6zy5uos9ci1"}]}}